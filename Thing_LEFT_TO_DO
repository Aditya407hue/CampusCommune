# Campus Job Portal - Development Tasks

## Completed Features âœ…

- TypeScript migration for backend
- Tailwind CSS integration
- Real-time updates with Convex live queries
- User authentication with role-based access
- Basic job posting and management
- Resume upload functionality
- Improve form validation with react-hook-form

## Stack Improvements

1. Backend Enhancement

   - Optimize Convex functions for better performance
   - Implement comprehensive error handling

2. Frontend Modernization
   - Edit Navbar (remove the down border)
   - Add logo to the navbar
   - Enhance component reusability
   - Implement better state management
   - shadcn/ui component library implementation

## Features To Implement

- Edit profile functionality - backend route + frontend
- Search feature implementation
- MyJobs filter addition

### 1. Notification System

- Implement response success messages across all pages
- Add WhatsApp notification integration
- Implement calendar notifications for deadline reminders

### 2. Application Management

- Add detailed view for recent applications
  - Endpoint: /applications/:id - show details in model view
- Implement application status tracking (selected/rejected)
- Integrate CSV processing for selected candidates
- Add automated notification system for selection results

### 3. User Profile Enhancement

- Update user model to include:
  - First name and last name
  - Date of birth
  - Interests/preferences
  - Role preferences
- Implement profile editing in user dashboard

### 4. Job Management

- Add job status - Drafted if PR has not yet approved the application
- Add job sorting based on deadlines
- Implement job interest marking system
- Add role-based job filtering

### 5. Resume Analysis

- Implement AI-based resume review system
- Add ATS score prediction
- Provide improvement suggestions

### 6. PR Integration

- Develop email parsing for job details
- Create Excel export functionality
- Implement PR approval workflow
- Add pending status for unapproved jobs

### 7. Workflow Automation

- Email fetch --- > http request to backend for checking all the companies with active deadline --->
  then send the list of companies with active deadline and email to gemini and ask it to see whether the mail is an update from list of companies or its an new job update (and also give a flag in resposne) ---> if its from active companies then send it to backend as an update otherwise send it as a new job posting

### New Workflow model

- Watch for new mail
- Iterate for attachments
- If there is any attachment then using array aggregator and iterator to store the attachments in google drive and get the link of the file
- Send the link of the file to backend
- Now send the mail to gemini
- Ask it to see whether the mail is an update from list of companies or its an new job update (and also give a flag in resposne)
- If yes, then send it to gemini once more and summarise the update and send it to backend as an update
- If no, then send it to gemini once more and format as a new job posting and then send it to backend as a new job posting

--Done the workflow just need to add the backend part

--need to add the update-job schema , routes and controllers
--need to expose the api of create job posting
--need to add PR in in user role , need to create its dashboard , need to add the update job form (dashboard should show the job posting and the original email from which it was posted)
-- add notification system for PR approval
-- add notification system for job updates

<!-- -- add notification system for deadline reminders
-- add notification system for new job postings -->
